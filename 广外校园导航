#include<iostream>
#include<string> 
#include <stdio.h>
#include<stdlib.h>
#define MAXSIZE 20
#define MAXINT 32767
typedef int status;
typedef int VerTexType;  //顶点的数据类型
typedef int ArcType;  //边的权值为整型
#define MaxInt 10000
using namespace std;
//图的邻接矩阵存储
typedef struct {
	int vexs[MAXSIZE];//顶点表    以 0，1 ，2， ……代表地点 
	int vexnum, arcnum;//顶点数，边数 
	int arcs[MAXSIZE][MAXSIZE];//邻接矩阵 
//	char name[MAXSIZE];
	int name;
}AMGraph;



void menu() {
	//菜单
	cout << "本系统以序号代替地点名称，如下：" << endl;
	cout << "0体育场，1图书馆，2大会堂，3学术报告厅，4实验楼" << endl;
	cout << "5教学楼，6八角楼，7办公楼，8第二饭堂，9隧道口" << endl;
	cout << "10第一饭堂，11门诊楼，12GOGO新天地，13又康超市，14宿舍" << endl;
}
int function() {
	cout << "以下为功能选择：" << endl;
	cout << "2.输出地图的邻接矩阵" << endl;
	cout << "3.输出地图的邻接表" << endl;
	cout << "4.从指定地点出发，打卡所有点之后回到起点的经过地点序列，并求出所经历的路程" << endl;
	cout << "5.从指定点出发，输出到达图中所有点的最短距离及经过的地点" << endl;
	cout << "6.从指定的地点(起点)到达另一指定地点(终点)的最短距离，以及经过的地点" << endl;
	cout << "7.输出图中所有两点之间的最短距离" << endl;
	cout << "8.退出" << endl;
	cout << "请输入你的选择(输入为功能前的序号)：" << endl;
}

//功能1 和 功能2  陈泽熙 
void function1() {
	cout << "\t\t--------------------------------------------------------" << endl;
	cout << "\t\t|                    体育                                  |" << endl;
	cout << "\t\t|                     场                                   |" << endl;
	cout << "\t\t|                                                          |" << endl;
	cout << "\t\t|                         大会                             |" << endl;
	cout << "\t\t|                          堂                              |" << endl;
	cout << "\t\t|                                  学术报                  |" << endl;
	cout << "\t\t|                 图书              告厅                   |" << endl;
	cout << "\t\t|                  馆                     实验             |" << endl;
	cout << "\t\t|     门诊                                 楼              |" << endl;
	cout << "\t\t|      楼                     教学                 办公    |" << endl;
	cout << "\t\t|                              楼                   楼     |" << endl;
	cout << "\t\t|           第一                              八角         |" << endl;
	cout << "\t\t|GoGo       饭堂                               楼          |" << endl;
	cout << "\t\t|新天地                                                    |" << endl;
	cout << "\t\t|                隧道                                      |" << endl;
	cout << "\t\t|                 口         第二                          |" << endl;
	cout << "\t\t|                            饭堂                          |" << endl;
	cout << "\t\t|           又康                                           |" << endl;
	cout << "\t\t|           超市                                           |" << endl;
	cout << "\t\t| 宿舍                                                     |" << endl;
	cout << "\t\t------------------------------------------------------------" << endl;
}
status CreateMap(AMGraph& G)
{
	G.vexnum = 15;
	G.arcnum = 23;
	G.vexs[0] = 0;
	G.vexs[1] = 1;
	G.vexs[2] = 2;
	G.vexs[3] = 3;
	G.vexs[4] = 4;
	G.vexs[5] = 5;
	G.vexs[6] = 6;
	G.vexs[7] = 7;
	G.vexs[8] = 8;
	G.vexs[9] = 9;
	G.vexs[10] = 10;
	G.vexs[11] = 11;
	G.vexs[12] = 12;
	G.vexs[13] = 13;
	G.vexs[14] = 14;
	for (int i = 0; i < MAXSIZE; i++)//初始化所有顶点之间距离 
	{
		for (int j = 0; j < MAXSIZE; j++)
		{
			if (j != i)
				G.arcs[i][j] = MaxInt;
			else
				G.arcs[i][j] = 0;

		}
	}
	//各顶点之间距离
	G.arcs[0][1] = G.arcs[1][0] = 400;
	G.arcs[0][2] = G.arcs[2][0] = 420;
	G.arcs[0][3] = G.arcs[3][0] = 500;
	G.arcs[1][2] = G.arcs[2][1] = 80;
	G.arcs[1][3] = G.arcs[3][1] = 150;
	G.arcs[1][5] = G.arcs[5][1] = 400;
	G.arcs[1][10] = G.arcs[10][1] = 880;
	G.arcs[2][3] = G.arcs[3][2] = 150;
	G.arcs[3][4] = G.arcs[4][3] = 150;
	G.arcs[4][5] = G.arcs[5][4] = 200;
	G.arcs[4][6] = G.arcs[6][4] = 300;
	G.arcs[4][7] = G.arcs[7][4] = 270;
	G.arcs[5][6] = G.arcs[6][5] = 350;
	G.arcs[5][8] = G.arcs[8][5] = 700;
	G.arcs[5][9] = G.arcs[9][5] = 200;
	G.arcs[5][10] = G.arcs[10][5] = 400;
	G.arcs[6][7] = G.arcs[7][6] = 80;
	G.arcs[7][13] = G.arcs[13][7] = 1000;
	G.arcs[8][9] = G.arcs[9][8] = 100;
	G.arcs[9][10] = G.arcs[10][9] = 60;
	G.arcs[9][13] = G.arcs[13][9] = 220;
	G.arcs[10][11] = G.arcs[11][10] = 200;
	G.arcs[12][13] = G.arcs[13][12] = 900;
	G.arcs[13][14] = G.arcs[14][13] = 210;
}

void function2(AMGraph& G) {
	int i, j;
	for (i = 0; i < G.vexnum; ++i) {
		for (j = 0; j < G.vexnum; ++j) {
			if (j != G.vexnum - 1) {
				if (G.arcs[i][j] != MaxInt)
					cout << G.arcs[i][j] << "\t";
				else
					cout << "∞" << "\t";
			}
			else {
				if (G.arcs[i][j] != MaxInt)
					cout << G.arcs[i][j] << endl;
				else
					cout << "∞" << endl;
			}
		}
	}
}
// 


//功能3 易冉蝶
#define MAXVEX 24
typedef  string VertexType;

//边表结点 
typedef struct EdgeNode {
	int adjvex;
	struct EdgeNode* next;
}EdgeNode;

//顶点表结点
typedef struct VertexNode {
	VertexType data;
	EdgeNode* firstedge;
}VertexNode, AdjList[MAXVEX];

typedef struct {
	AdjList adjlist;
	int numVertexes, numEdges;
}GraphAdjList;

//创建邻接表
void Create(GraphAdjList* G) {

	int i, j;
	EdgeNode* p;

	//printf("输入顶点数和边数:\n");

	G->numVertexes = 15; G->numEdges = 24;
	//输入顶点信息
	//printf("输入顶点信息:\n"); 
	G->adjlist[0].data = "体育场";
	G->adjlist[1].data = "图书馆";
	G->adjlist[2].data = "大会堂";
	G->adjlist[3].data = "学术报告厅";
	G->adjlist[4].data = "实验楼";
	G->adjlist[5].data = "教学楼";
	G->adjlist[6].data = "八角楼";
	G->adjlist[7].data = "办公楼";
	G->adjlist[8].data = "第二饭堂";
	G->adjlist[9].data = "隧道口";
	G->adjlist[10].data = "第一饭堂";
	G->adjlist[11].data = "门诊楼";
	G->adjlist[12].data = "GOGO新天地";
	G->adjlist[13].data = "又康超市";
	G->adjlist[14].data = "宿舍";
	//G->adjlist[14].firstedge=NULL;


		//建立边表
		//printf("输入边(Vi,Vj)中的下标i,j:\n"); 
	for (i = 0; i < G->numVertexes; i++) {
		//      getchar();
		 //     scanf("%c",&G->adjlist[i].data);
		G->adjlist[i].firstedge = NULL;           //将指向边表的指针初始化 
	}

	i = 0; j = 1;


	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;
	i = 0; j = 2;


	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;
	i = 0; j = 3;


	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;
	i = 1; j = 3;


	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;
	i = 3; j = 4;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;
	i = 4; j = 6;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 4; j = 7;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 4; j = 5;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 5; j = 1;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 5; j = 8;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 5; j = 10;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 5; j = 9;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 13; j = 9;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 13; j = 12;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 13; j = 14;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 13; j = 7;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 10; j = 11;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 10; j = 1;

	//下面代码有向图无,无向图有 
	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 9; j = 10;

	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 9; j = 8;

	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 5; j = 6;

	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 6; j = 7;

	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 1; j = 2;

	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	i = 2; j = 3;

	p = (EdgeNode*)malloc(sizeof(EdgeNode));
	p->adjvex = i;                                //存储弧头 
	p->next = G->adjlist[j].firstedge;            //头插法插入边结点 
	G->adjlist[j].firstedge = p;

	//打印邻接表
	printf("邻接表为:\n");
	for (i = 0; i < G->numVertexes; i++) {
		p = G->adjlist[i].firstedge;
		while (p) {
			printf("(%s,%s)", (G->adjlist[i].data).c_str(), (G->adjlist[p->adjvex].data).c_str());
			p = p->next;
		}
		printf("\n");
	}
}
void function3() {
	GraphAdjList G;
	Create(&G);
}

// 

// 功能4和功能5 林韵璇 
int _len = 0;
int _sum = 0;
int* list = new int[MAXSIZE];//int list[MAXSIZE];
int* visited = new int[MAXSIZE];//int visited[MAXSIZE]={0};
void dfs(AMGraph& G, int v) {
	int w;
	visited[v] = 1;
	list[_len++] = v;
	for (w = 1; w <= G.vexnum; w++) {
		if (G.arcs[v][w] != 0 && visited[w] == 0) {
			_sum += G.arcs[v][w];
			dfs(G, w);
			list[_len++] = v;//上述的dfs结束后回到V  
			// 然后进入V的下一个邻接点继续判断 
		}
	}
}
void function4(AMGraph& G) {
	int v;
	cout << "请输入指定的地点(输入为地点前的序号)：" << endl;
	cin >> v;
	dfs(G, v);
	cout << "经过的地点为：" << endl;
	for (int i = 0; i < _len; i++) {
		cout << list[i] << " ";
	}
	cout << "经过的总路程为：" << _sum << endl;
}

int Path2[MAXSIZE][MAXSIZE];
int D2[MAXSIZE][MAXSIZE];
void ShortestPath_Floyed(AMGraph& G) {
	int i, j, k;
	for (i = 0; i < G.vexnum; i++) {
		for (j = 0; j < G.vexnum; j++) {
			D2[i][j] = G.arcs[i][j];
			if (D2[i][j] < MAXINT && i != j)
				Path2[i][j] = i;//如果i和j之间有弧，则将j的前驱置为i 
			else Path2[i][j] = -1;//如果i和j之间无弧，则将j的前驱置为-1 
		}
	}
	for (k = 0; k < G.vexnum; k++)
		for (i = 0; i < G.vexnum; i++)
			for (j = 0; j < G.vexnum; j++) {
				if (D2[i][j] > D2[i][k] + D2[k][j]) {
					D2[i][j] = D2[i][k] + D2[k][j];
					Path2[i][j] = Path2[k][j];
				}
			}
}
void ShowPath(AMGraph& G, int start, int end) {
	if (Path2[start][end] != -1) {
		ShowPath(G, start, Path2[start][end]);
		cout << G.vexs[Path2[start][end]] << "-->";
	}
}
void function5(AMGraph& G) {
	AMGraph G1;
	G1.arcnum = G.arcnum;
	G1.vexnum = G.vexnum;
	for (int i = 0; i < G1.vexnum; i++)
		G1.vexs[i] = i;
	for (int i = 0; i < G1.vexnum; i++) {
		for (int j = 0; j < G1.vexnum; j++) {
			if (j == i)
				G1.arcs[i][j] = 0;
			else {
				if (G.arcs[i][j] != 0)
					G1.arcs[i][j] = G.arcs[i][j];
				else
					G1.arcs[i][j] = MAXINT;
			}
		}
	}
	ShortestPath_Floyed(G1);
	cout << "请输入指定的地点(输入为地点前的序号)：" << endl;
	int start;
	cin >> start;
	for (int i = 0; i < G1.vexnum; i++) {
		if (i != start) {
			ShowPath(G1, start, i);
			cout << G1.vexs[i] << endl;
			cout << "最短路径长度为：" << D2[start][i] << endl;
		}
	}
}
//

//功能6  郭贤玉 

int* D = new int[MAXSIZE];	                    				//用于记录最短路的长度
bool* S = new bool[MAXSIZE];          							//标记顶点是否进入S集合
int* Path = new int[MAXSIZE];									//用于记录最短路顶点的前驱
int* across = new int[MAXSIZE];				//用于计算总的路径长度++++++++++++ 
//确定点v在G中的位置
int LocateVex(AMGraph G, VerTexType v) {
	for (int i = 0; i < G.vexnum; ++i)
		if (G.vexs[i] == v)
			return i;
	return -1;
}//LocateVex
//用Dijkstra算法求有向网G的v0顶点到其余顶点的最短路径 
void ShortestPath_DIJ(AMGraph G, int v0) {
	int v, i, w, min;
	int n = G.vexnum;                    					//n为G中顶点的个数 

	for (v = 0; v < n; ++v) {             					//n个顶点依次初始化 
		S[v] = false;  //Yes&No                						//S初始为空集 
		D[v] = G.arcs[v0][v]; //min          					//将v0到各个终点的最短路径长度初始化为弧上的权值 
		if (D[v] < MaxInt)  Path[v] = v0;  					//如果v0和v之间有弧，则将v的前驱置为v0 
		else Path[v] = -1;               					//如果v0和v之间无弧，则将v的前驱置为-1 
	}

	S[v0] = true;                    							//将v0加入S 
	D[v0] = 0;                      							//源点到源点的距离为0 

	//―初始化结束，开始主循环，每次求得v0到某个顶点v的最短路径，将v加到S集―
	for (i = 1; i < n; ++i)
	{									//对其余n-1个顶点，依次进行计算 
		min = MaxInt;
		for (w = 0; w < n; ++w)
			if (!S[w] && D[w] < min) {						//选择一条当前的最短路径，终点为v 
				v = w;
				min = D[w];
			}//if         	
		S[v] = true;                   						//将v加入S 
		for (w = 0; w < n; ++w)           					//更新从v0出发到集合V?S上所有顶点的最短路径长度 
			if (!S[w] && (D[v] + G.arcs[v][w] < D[w])) {
				D[w] = D[v] + G.arcs[v][w];   				//更新D[w] 
				Path[w] = v;              					//更改w的前驱为v 
			}//if 
	}//for  
}//ShortestPath_DIJ

//返回对应地名 
string diaplay_path(AMGraph& G, int t_num)
{
	//	cout << G.vexs[Path[temp]] << "-->";
	int c = G.vexs[t_num];
	switch (c) {
	case 0:
		return "体育场";
		break;
	case 1:
		return  "图书馆";
		break;
	case 2:
		return "大会堂";
		break;
	case 3:
		return "学术报告厅";
		break;
	case 4:
		return "实验楼";
		break;
	case 5:
		return "教学楼";
		break;
	case 6:
		return "八角楼";
		break;
	case 7:
		return "办公楼";
		break;
	case 8:
		return "第二饭堂";
		break;
	case 9:
		return "隧道口";
		break;
	case 10:
		return "第一饭堂";
		break;
	case 11:
		return "门诊楼";
		break;
	case 12:
		return "GOGO新天地";
		break;
	case 13:
		return "又康超市";
		break;
	case 14:
		return "宿舍";
		break;
	}
}

int index = 0;//,number;
void DisplayPath(AMGraph G, int begin, int temp) {
	//显示最短路
	if (Path[temp] != -1) {

		DisplayPath(G, begin, Path[temp]);

		cout << diaplay_path(G, Path[temp]) << "->";//输出对应地名 

		across[index] = G.vexs[Path[temp]];
		index++;
	}
}//DisplayPath

//计算并返回最短路径 
int output(int* across, AMGraph G)
{
	int i, j, sum = 0;
	for (int k = 1; k <= index; k++)
	{
		i = LocateVex(G, across[k]);  j = LocateVex(G, across[k - 1]);		//确定v1和v2在G中的位置，即顶点数组的下标 
		sum += G.arcs[i][j];
//		cout<<endl<<G.arcs[i][j]<<endl;
	}
	return sum;
}
void function6(AMGraph& G) {
	int start, destination;
	int  num_start, num_destination;
	cout << "请依次输入起始点、终点名称：";
	cin >> start >> destination;
	num_start = LocateVex(G, start);
	num_destination = LocateVex(G, destination);
	ShortestPath_DIJ(G, num_start);

	cout << endl << "最短路径为：";
	DisplayPath(G, num_start, num_destination);

	cout << diaplay_path(G, num_destination) << endl;

	across[index] = destination;//存放经过的顶点++++

	cout << "路径长度：" << output(across, G) << endl;//输出所经过的总路径+++

}


//功能7 梁康凤
#define MVNum 20  
int Path3[MVNum][MVNum];						//最短路径上顶点vj的前一顶点的序号
int D3[MVNum][MVNum];						//记录顶点vi和vj之间的最短路径长度
void ShortestPath_Floyed3(AMGraph G) {
	//用Floyd算法求有向网G中各对顶点i和j之间的最短路径 
	int i, j, k;
	for (i = 0; i < G.vexnum; ++i)          		//各对结点之间初始已知路径及距离 
		for (j = 0; j < G.vexnum; ++j) {
			D3[i][j] = G.arcs[i][j];
			if (D3[i][j] < MaxInt && i != j)  Path3[i][j] = i;  	//如果i和j之间有边，则将j的前驱置为i 
			else Path3[i][j] = -1;              		//如果i和j之间无边，则将j的前驱置为-1 
		}//for
	for (k = 0; k < G.vexnum; ++k)
		for (i = 0; i < G.vexnum; ++i)
			for (j = 0; j < G.vexnum; ++j)
				if (D3[i][k] + D3[k][j] < D3[i][j]) {   		//从i经k到j的一条路径更短 
					D3[i][j] = D3[i][k] + D3[k][j];    		//更新D[i][j] 
					Path3[i][j] = Path3[k][j];       			//更改j的前驱为k 
				}//if 
}//ShortestPath_Floyed

void DisplayPath2(AMGraph G, int begin, int temp) {
	//显示最短路径
	if (Path3[begin][temp] != -1) {
		DisplayPath2(G, begin, Path3[begin][temp]);
		cout << G.vexs[Path3[begin][temp]] << "-->";
	}
}//DisplayPath2
void function7(AMGraph& G) {
	int start, destination;
	int num_start, num_destination;

	ShortestPath_Floyed3(G);

	//输出所有顶点之间的最短路径 
	for (int i = 0; i < G.vexnum; i++)
	{
		for (int j = 0; j < G.vexnum, i != j; j++)
		{

			start = G.vexs[i];
			destination = G.vexs[j];
			num_start = LocateVex(G, start);
			num_destination = LocateVex(G, destination);

			DisplayPath2(G, num_start, num_destination);
			cout << G.vexs[num_destination] << endl;
			cout << "最短路径的长度为：" << D3[num_start][num_destination] << endl;
			cout << endl;
		}

	}


}

// 
int main() {
	AMGraph G;
	CreateMap(G);
	AMGraph G2;
	CreateMap(G2);
	for (int i = 0; i < MAXSIZE; i++) {
		for (int j = 0; j < MAXSIZE; j++)
			if (i == j)
				G2.arcs[i][j] = MaxInt;
	}
	cout << "以下为南校简易地图：" << endl;
	function1();
	cout << endl;
	menu();
	function();
	// 选择2~8中的功能

	int choose;
	cin >> choose;
	while (choose != 8) {
		switch (choose) {
		case 2:function2(G); break;
		case 3:function3(); break;
		case 4:function4(G); break;
		case 5:function5(G); break;
		case 6:function6(G2); break;
		case 7:function7(G); break;
		case 8:break;//功能8
		}
		cout << "请继续输入你的选择：" << endl;
		cin >> choose;
	}
	if (D) delete[]D;
	if (S) delete[]S;
	if (Path) delete[]Path;
	if (across) delete[]across;
	if (list) delete[]list;
	if (visited) delete[]visited;
	return 0;
}
